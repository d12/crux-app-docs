require 'json'

def blueprint_object_to_string(blueprint_object)
  blueprint_name = blueprint_object[0].gsub("Blueprint", "")
  blueprint_name += "##{blueprint_object[1]}" if blueprint_object[1] != "default"
  blueprint_name
end

# Instead of parenthesis or #, hyphenate between the object name and variant if there is one.
def blueprint_object_to_link(blueprint_object)
  blueprint_name = blueprint_object[0].gsub("Blueprint", "").downcase
  blueprint_name += "-#{blueprint_object[1].downcase}" if blueprint_object[1] != "default"
  blueprint_name
end

def blockquote(text)
  text.lines.map { |line| "> #{line.chomp}" }.join("\n") + "\n"
end

def format_type(type, nullable: false)
  type_str = if type.is_a?(Array)
    "[#{type[0].gsub("Blueprint", "")}#{type[1] != "default" ? " (#{type[1]})" : ""}](##{blueprint_object_to_link([type[0], type[1]])})"
  else
    type.to_s
  end

  nullable ? "nullable #{type_str}" : type_str
end

def generate_response_objects_section(docs_json_data)
  blueprints = docs_json_data["blueprints"]

  section = "<!-- BEGIN AUTOGENERATED API RESPONSE OBJECTS -->\n\n"

  blueprints.sort.each do |blueprint_name, blueprint_data|
    object_name = blueprint_name.gsub("Blueprint", "")
    blueprint_data["views"].sort.each do |view_name, view_data|
      view_suffix = view_name != "default" ? " (#{view_name})" : ""
      section << "### #{object_name}#{view_suffix}\n\n"

      # Fields
      (view_data["fields"] || []).each do |field|
        next unless field["name"] # skip if malformed

        if field["name"] == "id"
          field["nullable"] = false
          field["type"] = "integer"
          field["description"] = "An ID that uniquely identifies the resource across Crux."
        end

        type = format_type(field["type"], nullable: field["nullable"])
        section << "> #### `#{field["name"]}` <span class=\"object-type\">#{type}</span>\n>\n"
        section << "> #{field["description"]}\n>\n" if field["description"]
      end

      # Associations
      (view_data["associations"] || []).each do |assoc|
        next unless assoc["name"]

        type = format_type(assoc["type"], nullable: assoc["nullable"])
        type = "array #{type}" if assoc["array"]

        section << "> #### `#{assoc["name"]}` <span class=\"object-type\">#{type}</span>\n>\n"
        section << "> #{assoc["description"]}\n>\n" if assoc["description"]
      end

      section << "\n"
    end
  end

  section << "<!-- END AUTOGENERATED API RESPONSE OBJECTS -->"
  section
end

def generate_api_endpoints_section(docs_json_data)
  section = "<!-- BEGIN AUTOGENERATED API ENDPOINTS -->\n\n"
  section << "## API Endpoints\n\n"

  controllers = docs_json_data['controllers'].sort_by { |k, _| k }

  controllers.each do |(_, actions)|
    actions.each do |_, action_data|
      action_title = "`#{[action_data["method"].upcase, action_data["path"]].join(" ")}`"
      section << "### #{action_title}\n\n"

      block = ""
      block << "#{action_data["description"]}\n\n"

      block << "#### Parameters:\n\n"
      action_data["params"].each do |param_name, param_data|
        required_string = param_data["required"] ? " This parameter is required." : " This parameter is optional."
        block << "##### `#{param_name}`\n\n"
        block << "#{param_data["description"]}#{required_string}\n\n"
      end

      block << "#### Authorization:\n\n"
      block << "#{action_data["authorization"]}\n\n"

      block << "#### Response:\n\n"
      if action_data["return_blueprint"].length > 1
        block << "One of: [#{action_data["return_blueprint"].map { |bp| "[#{blueprint_object_to_string(bp)}](##{blueprint_object_to_link(bp)})" }.join(", ")}]\n\n"
      else
        block << "[#{blueprint_object_to_string(action_data["return_blueprint"][0])}](##{blueprint_object_to_link(action_data["return_blueprint"][0])})\n\n"
      end

      section << blockquote(block) + "\n"
    end
  end

  section << "<!-- END AUTOGENERATED API ENDPOINTS -->"
  section
end

# Load JSON
json_file = File.read(File.join(File.dirname(__FILE__), '../../climbing-app/public_api_documentation.json'))
docs_json_data = JSON.parse(json_file)

# Load and update markdown file
file_path = File.join(File.dirname(__FILE__), '../docs/api-documentation/api-reference.md')
existing_file = File.read(file_path)

# Replace API Endpoints section
api_start = "<!-- BEGIN AUTOGENERATED API ENDPOINTS -->"
api_end   = "<!-- END AUTOGENERATED API ENDPOINTS -->"
api_start_index = existing_file.index(api_start)
api_end_index   = existing_file.index(api_end)

if api_start_index.nil? || api_end_index.nil?
  abort("❌ Could not find API endpoint markers in the target file.")
end

api_section = generate_api_endpoints_section(docs_json_data)
existing_file = existing_file[0...api_start_index] + api_section + existing_file[(api_end_index + api_end.length)..]

# Replace Response Objects section
resp_start = "<!-- BEGIN AUTOGENERATED API RESPONSE OBJECTS -->"
resp_end = "<!-- END AUTOGENERATED API RESPONSE OBJECTS -->"
resp_start_index = existing_file.index(resp_start)
resp_end_index = existing_file.index(resp_end)

if resp_start_index.nil? || resp_end_index.nil?
  abort("❌ Could not find API response object markers in the target file.")
end

resp_section = generate_response_objects_section(docs_json_data)
existing_file = existing_file[0...resp_start_index] + resp_section + existing_file[(resp_end_index + resp_end.length)..]

# Save updated file
File.write(file_path, existing_file)
puts "✅ API reference and response objects updated successfully."
