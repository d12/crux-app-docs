require 'json'

def blueprint_object_to_string(blueprint_object)
  blueprint_name = blueprint_object[0].gsub("Blueprint", "")
  blueprint_name += "##{blueprint_object[1]}" if blueprint_object[1] != "default"
  blueprint_name
end

def blockquote(text)
  text.lines.map { |line| "> #{line.chomp}" }.join("\n") + "\n"
end

# Load JSON
json_file = File.read(File.join(File.dirname(__FILE__), '../../climbing-app/public_api_documentation.json'))
docs_json_data = JSON.parse(json_file)

# Load and preserve existing content before autogenerated section
existing_file = File.read(File.join(File.dirname(__FILE__), '../docs/api-documentation/api-reference.md'))
existing_content = existing_file.split("<!-- BEGIN AUTOGENERATED API DOCUMENTATION -->").first + "<!-- BEGIN AUTOGENERATED API DOCUMENTATION -->\n\n"

# Start section
existing_content << "## API Endpoints\n\n"

# Sort controllers alphabetically
controllers = docs_json_data['controllers'].sort_by { |k, _| k }

controllers.each do |(_, actions)|
  actions.each do |_, action_data|
    # Unindented route header
    action_title = "`#{[action_data["method"].upcase, action_data["path"]].join(" ")}`"
    existing_content << "### #{action_title}\n\n"

    # Everything else blockquoted
    block = ""
    block << "#{action_data["description"]}\n\n"

    block << "#### Parameters:\n\n"
    action_data["params"].each do |param_name, param_data|
      required_string = param_data["required"] ? " This parameter is required." : " This parameter is optional."
      block << "##### `#{param_name}`\n\n"
      block << "#{param_data["description"]}#{required_string}\n\n"
    end

    block << "#### Authorization:\n\n"
    block << "#{action_data["authorization"]}\n\n"

    block << "#### Response:\n\n"
    if action_data["return_blueprint"].length > 1
      block << "One of: [#{action_data["return_blueprint"].map { |bp| blueprint_object_to_string(bp) }.join(", ")}]\n\n"
    else
      block << "#{blueprint_object_to_string(action_data["return_blueprint"][0])}\n\n"
    end

    existing_content << blockquote(block) + "\n"
  end
end

# Save the updated markdown file
File.write(File.join(File.dirname(__FILE__), '../docs/api-documentation/api-reference.md'), existing_content)
puts "âœ… API reference updated successfully."
